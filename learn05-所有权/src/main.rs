//1.rust通过所有权机制来管理内存,编译器在编译就会根据所有权规则对内存的使用机型检查


//2.堆和栈
//堆上:变量   //栈上:临时变量
//编译的时候数据的类型大小是固定的,就是分配在栈上的
//编译的时候数据类型大小不固定的,就是分配在堆上


//3.作用域
//


//4.String内存回收


//5.移动


//6.clone


//7.栈上数据拷贝

//8.函数和作用域



fn main() {
    println!("Hello, world!");

    let x:i32=1;
    {
        let y:i32=1;  //局部变量  当前作用域有效
    }
    println!( "x = {}",x);

    {
        //字符串类型会放在堆上,编译时不知道字符串的大小
        let s1=String::from("hello");
        println!(" s1 ==== {}",s1);
    }
}
