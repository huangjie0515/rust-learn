1.变量  (可变性   常量    隐藏)
//变量分为可变性  不可变性
//定义变量用let,如果变量没有用mut,那么是不可变的
let  a=1;   //不可变变量
let b:u32=2;
//不允许对不可变变量赋值两次
a=2;  //cannot assign twice to immutable variable

//可变变量声明
let  mut   a=1;  //此时a为可变变量
a=3;

//变量的隐藏性
let a:f32=1;  //后定义的变量会把之前同名变量隐藏掉

//常量  const定义常量
const   constant:u32=10;

//1.rust语言是静态类型语言,也就是说编译时必须知道所有变量的类型
//2.编译器具有自动推导的能力

2.数据类型
  bool                    let is_true:bool=false;  let is_false:bool=true;
  char                    let a:char='a';let b:char='汉';
  数字类型                i8,i16, i32,i64,u8,u16,u32,u64     let c:i8=-11;  let e:f32=10.0;       
  数组                    [Type;size]                let arr: [u32;5] = [1 ,2 ,3 ,4 ,5];      println!("arr[0]={}",arr[0]);     
  自适应类型              println!("max = {}",usize::max_value()); //18446744073709551615
  元组                    let tup:(u32,f64,u32)=(110,11.11,11);     let tup:(i32,f32,char)=(-3,3.69,'好');  let (x,y,z)=tup;  //元组的拆解
  结构体
  枚举


3.函数
   //无参无返回值函数
   fn  other_fn(){
   }
   //有参无返回值函数 
   fn other_fun01(a:u32,b:u32){
    let c:u32=a+b;
    println!("c-----{}",c );
   }
   
   //有参有返回值
   fn other_fun02(a:i32,b:i32) -> i32{
    return a+b;
   }
   
   //有参有返回值
   fn other_fun02(a:i32,b:i32) -> i32{
     a+b
   }

   
    //语句是执行一些操作,但是不返回值的指令
    let z={
        let x=1;
        x+1
    };   
   

4.注释
    rust注释://


5.控制流
    //没有小括号
    //if { }	
    if  y==1{
	
	}
	
	//if else {  }
    if y==1{
        println!("y =1 ");
    }else {
        println!(" y !=1");
    }
	
	//if else if{}
    if y==1{
        println!(" y =1 ");
    }else if y==2 {
        println!(" y =2 ");
    }else if y==3{
        println!(" y =3 ");
    }
	
	
	//loop
    let mut counter =0;  //mut可变变量
    loop {
        println!("in loop ");
        if counter==10{
            break;
        }
        counter+=1;
    }


    let result= loop {
        counter +=1;
        if counter==20{
            break   counter*2;
        }
    };  //语句
	
	
	
	//while循环
    let mut i=0;
    while i!=10{
        i+=1;
    }
    println!(" i = {}",i);


    //for循环
    let arr:[u32;5]=[1,2,3,4,5];
    for element  in  arr.iter(){
        println!(" element = {}",element);
    }

    for element  in  &arr{
        println!(" result =  {}",element);
    }
	
	
	
	
	
	
	
6.所有权
            //1.rust通过所有权机制来管理内存,编译器在编译就会根据所有权规则对内存的使用机型检查


            //2.堆和栈


            //3.作用域


            //4.String内存回收
              

            //5.移动


            //6.clone


            //7.栈上数据拷贝


            //8.函数和作用域


   
   	
	